{"version":3,"sources":["todoLogo.svg","assets/checklist-icon.png","components/Header.js","components/TodoForm.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mystyle","height","width","margin","Header","todoLogo","className","style","src","alt","TodoForm","this","props","currentItem","handleChange","handleSubmit","edit","onSubmit","type","required","id","value","text","onChange","htmlFor","Component","TodoItem","item","deleteItem","editItem","completedItem","from","opacity","marginTop","to","onClick","completed","TodoList","items","clearAll","listItems","length","map","key","textAlign","checklistImage","title","clearBtn","App","e","setState","target","a","preventDefault","newItem","state","updatedItems","uuid","localStorage","setItem","JSON","stringify","console","log","getItem","filteredItems","filter","selectedItem","find","todo","newItems","componentDidMount","todos","savedTodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c762cc3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/todoLogo.ff2edf2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/checklist-icon.a42c0957.png\";","import React from 'react';\r\n\r\nconst mystyle = {\r\n  height: \"20vh\",\r\n  width:\"80%\",\r\n  margin:\"0 auto\",\r\n};\r\n\r\nconst Header =({ todoLogo}) =>{\r\n  return(\r\n    <header>\r\n      <div className=\"header-container\" style={mystyle}>\r\n        <img src={todoLogo} alt=\"todoLogo\" height=\"100%\"width=\"100%\"/>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from'react';\r\n\r\nclass TodoForm extends Component{\r\n  render(){\r\n    const {currentItem, handleChange, handleSubmit, edit} =this.props\r\n    return(\r\n      <form className=\"form-container\" onSubmit={handleSubmit}>\r\n        <div className=\"input-field\">\r\n          <input type=\"text\"\r\n            required\r\n            id={currentItem.id}\r\n            value={currentItem.text}\r\n            onChange={handleChange} \r\n          />\r\n          <label htmlFor=\"name\" className=\"label-name\">\r\n            <span className=\"content-name\">Enter Task</span>\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\"\r\n         className={\r\n           edit ?\r\n           \"btn-edit btn\" : \"btn-add btn\"\r\n          } >\r\n          {edit ? 'Edit' : 'Add'}\r\n        </button>\r\n      </form>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from'react';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\nclass TodoItem extends Component{\r\n  // toggleItem =()=>{\r\n  //   this.props.completedItem\r\n  // }\r\n\r\n  render(){\r\n    const {item, text, deleteItem, editItem, completedItem} = this.props\r\n    return(\r\n      <Spring\r\n        from={{ opacity: 0, marginTop: -50 }}\r\n        to={{ opacity: 1, marginTop: 0 }}>\r\n        {props => (\r\n          <div style={props}>\r\n            <li className=\"todo-item\">\r\n              <p onClick={completedItem}\r\n                className={\"todo-item-text\" + (item.completed ? \" completed-item\" : \"\")}>{text}</p>\r\n              <div className=\"todo-icon\">\r\n                {!item.completed ? (\r\n                  <span className=\"edit-icon icon\" onClick={editItem}>\r\n                    <i className=\"fas fa-pen\" />\r\n                  </span>\r\n                ) : null}\r\n                \r\n                <span className=\"delete-icon icon\" onClick={deleteItem}>\r\n                  <i className=\"fas fa-trash\" />\r\n                </span>\r\n              </div>\r\n            </li> \r\n          </div>\r\n        )}\r\n      </Spring>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from'react';\r\nimport TodoItem from './TodoItem';\r\nimport checklistImage from '../assets/checklist-icon.png';\r\nclass TodoList extends Component{\r\n  render(){\r\n    const {items, clearAll, deleteItem, editItem, completedItem}=this.props\r\n    const listItems = items.length ? (items.map(item => {\r\n      return(\r\n        <TodoItem \r\n          item={item}\r\n          key={item.id} \r\n          text={item.text}\r\n          deleteItem= {() => deleteItem(item.id)}\r\n          editItem= {() => editItem(item.id)}\r\n          completedItem= {() => completedItem(item)}\r\n        />\r\n      )\r\n    })\r\n    ) : (\r\n      <div style={{textAlign:\"center\"}}>\r\n        <img src={checklistImage} alt=\"checklist icon\" height=\"80px\"></img>\r\n        <h1 className=\"empty-todo-title\">Add your first ToDo!</h1>\r\n      </div>\r\n      \r\n    )\r\n\r\n    const title = items.length ? (\r\n      <h1 className=\"task-title\">Your Tasks</h1>\r\n    ) : null\r\n\r\n    const clearBtn = items.length ? (\r\n      <button className=\"btn-clear-all\" onClick={clearAll}>Clear All</button>\r\n    ) : null\r\n\r\n    return(\r\n      <ul className=\"todo-list-container\">\r\n          {title}\r\n          {listItems}\r\n          {clearBtn}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList; ","import React, { Component } from 'react';\nimport todoLogo from './todoLogo.svg';\nimport './styles/App.css';\n\nimport Header from './components/Header';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport uuid from 'uuid';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[{id: uuid(), text:\"Testing\", completed:false}],\n      currentItem:{\n        id: uuid(),\n        text:'',\n        completed: false\n      }, \n      edit: false\n    }\n    \n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      currentItem:{\n        id: e.target.id,\n        text: e.target.value,\n        completed: false\n      }\n    })\n  }\n\n  handleSubmit = async (e) =>{\n    e.preventDefault();\n\n    const newItem = this.state.currentItem;\n    // console.log(newItem);\n    if(newItem.text !==\"\"){\n      const updatedItems = [...this.state.items, newItem];\n      await this.setState({\n        items: updatedItems,\n        currentItem:{\n          id:uuid(),\n          text:'',\n          completed: false\n        },\n        edit: false\n      })\n\n      localStorage.setItem('todos', JSON.stringify(this.state.items));\n      console.log(localStorage.getItem('todos'));\n    }\n  }\n \n  clearAll= async () =>{\n    await this.setState({\n      items:[]\n    });\n    localStorage.setItem('todos', JSON.stringify(this.state.items));\n  }\n\n  deleteItem = async (id) =>{\n    const filteredItems = this.state.items.filter(item=>\n      item.id !==id);\n    await this.setState({\n      items:filteredItems\n    });\n    localStorage.setItem('todos', JSON.stringify(this.state.items));\n  }\n\n  editItem = async (id) =>{\n    const filteredItems = this.state.items.filter(item=>\n      item.id !==id);\n    const selectedItem = this.state.items.find(item => item.id === id);\n    console.log(selectedItem);\n\n    await this.setState({\n      items:filteredItems,\n      currentItem:{\n        id: id,\n        text: selectedItem.text,\n        completed: false\n      },\n      edit: true\n    });\n    if(!this.state.edit)\n      localStorage.setItem('todos', JSON.stringify(this.state.items));\n  }\n\n  completedItem = async (todo) =>{\n    const newItems=this.state.items.map(item =>{\n      if(todo.id === item.id){\n        return{\n          id: todo.id,\n          text: todo.text,\n          completed: !todo.completed\n        }\n      }else return item\n    })\n    \n    await this.setState({\n      items: newItems\n    })\n    localStorage.setItem('todos', JSON.stringify(this.state.items));\n    // console.log(newItems);\n  }\n\n  componentDidMount = () =>{\n    const todos = localStorage.getItem('todos');\n    if(todos){\n      const savedTodos = JSON.parse(todos);\n      this.setState({\n        items: savedTodos\n      })\n    }else{\n      localStorage.setItem('todos', JSON.stringify(this.state.items));\n      console.log('NO todos');\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header todoLogo={todoLogo}/>\n        <section className=\"container\">\n          <TodoForm\n            currentItem={this.state.currentItem}\n            handleChange={this.handleChange} \n            handleSubmit={this.handleSubmit}\n            edit={this.state.edit} \n          />\n          <TodoList \n            items={this.state.items} \n            clearAll={this.clearAll} \n            deleteItem={this.deleteItem}\n            editItem={this.editItem}\n            completedItem={this.completedItem}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}